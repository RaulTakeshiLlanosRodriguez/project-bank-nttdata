package com.nttdata.bank.api;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.nttdata.bank.model.entity.Credit;
import com.nttdata.bank.model.entity.CreditBusiness;
import com.nttdata.bank.model.entity.CreditCard;
import com.nttdata.bank.model.entity.CreditPersonal;
import com.nttdata.bank.model.service.CreditCardService;
import com.nttdata.bank.model.service.CreditService;

@RestController
@RequestMapping("/credits")
public class CreditController {
	
	@Autowired
	private CreditService creditService;
	@Autowired
	private CreditCardService creditCardService;
	
	@PostMapping
	public ResponseEntity<String> createCredit(@RequestBody Map<String, Object> credit){
		
		String typeCredit = (String) credit.get("creditType");
		if(typeCredit.equalsIgnoreCase("personal")) {
			CreditPersonal creditData = new CreditPersonal();
			creditData.setCustomerId((Long) credit.get("customerId"));
			creditData.setCreditType("personal");
			creditData.setAmount((Double) credit.get("amount"));
			creditData.setDocumentIdentity((String) credit.get("documentIdentity"));
			Credit credit2 = creditService.createCreditPersonal(creditData);
			if(credit2 != null) {
				return ResponseEntity.status(HttpStatus.CREATED).body("Credit created successfully");
			}else {
				return ResponseEntity.badRequest().body("Customer already has an credit personal");
			}
			
		}else if(typeCredit.equalsIgnoreCase("business")) {
				CreditBusiness creditBusiness = new CreditBusiness();
				creditBusiness.setCompanyName((String) credit.get("companyName"));
				creditService.createCreditBusiness(creditBusiness);
				return ResponseEntity.status(HttpStatus.CREATED).body("Credit created successfully");
			}
		else {
			return ResponseEntity.badRequest().body("Type credit not exists");
		}
	}
	
	@GetMapping("{id}")
	public ResponseEntity<Credit> getCreditById(@PathVariable Long id){
		return ResponseEntity.ok(creditService.getCreditById(id));
	}
	
	@GetMapping
	public ResponseEntity<List<Credit>> getAllCredits(){
		return ResponseEntity.ok(creditService.getAllCredits());
	}
	
	@PostMapping("/cards")
	public ResponseEntity<String> createCreditCard(@RequestBody CreditCard creditCard){
		if(creditCard != null) {
			creditCardService.createCreditCard(creditCard);
			return ResponseEntity.status(HttpStatus.CREATED).body("Credit Card created successfully");
		}else {
			return ResponseEntity.badRequest().body("Error creating credit card");
		}
	}
	
	@GetMapping("/cards/{id}")
	public ResponseEntity<CreditCard> getCreditCardById(@PathVariable Long id){
		return ResponseEntity.ok(creditCardService.getCreditCardById(id));
	}
	
	@GetMapping("/cards")
	public ResponseEntity<List<CreditCard>> getAllCreditCards(){
		return ResponseEntity.ok(creditCardService.getAllCreditCards());
	}
	
	@PostMapping("/{creditId}/payment")
	public ResponseEntity<String> makePayment(@PathVariable Long creditId, @RequestParam Double paymentAmount){
		String message = creditService.makeCreditPayment(creditId, paymentAmount);
		return ResponseEntity.ok(message);
	}
	
	@PostMapping("/cards/{cardId}/consumption")
	public ResponseEntity<String> makeConsumption(@PathVariable Long cardId, @RequestParam Double consumptionAmount){
		String message = creditCardService.loadConsumptionCard(cardId, consumptionAmount);
		return ResponseEntity.ok(message);
	}
	
	@GetMapping("/{cardId}/balance")
	public ResponseEntity<String> consultBalanceCreditCard(@PathVariable Long cardId){
		Double balance = creditCardService.getBalance(cardId);
		return ResponseEntity.ok("Balance: "+balance);
	}
	
}
