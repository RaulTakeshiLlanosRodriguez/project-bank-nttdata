package com.nttdata.bank.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.nttdata.bank.model.client.MovementFeignClient;
import com.nttdata.bank.model.entity.Credit;
import com.nttdata.bank.model.entity.CreditBusiness;
import com.nttdata.bank.model.entity.Movement;
import com.nttdata.bank.model.repository.CreditRepository;
import com.nttdata.bank.model.service.CreditService;
import com.nttdata.bank.model.util.ResourceNotFoundException;

@Service
public class CreditServiceImpl implements CreditService{
	
	@Autowired
	private CreditRepository creditRepository;
	
	@Autowired
	private MovementFeignClient movementFeign;
	
	@Override
	public List<Credit> getCreditByCustomer(Long customerId) {
		return creditRepository.findByCustomerId(customerId);
	}

	@Override
	public Credit createCreditPersonal(Credit credit) {
		List<Credit> listCreditPersonal = creditRepository.findByCustomerIdAndCreditType(credit.getCustomerId(), "personal");
		if(!listCreditPersonal.isEmpty()) {
			return null;
		}
		return creditRepository.save(credit);
	}

	@Override
	public Credit createCreditBusiness(Credit credit) {
		return creditRepository.save(credit);
	}

	@Override
	public String makeCreditPayment(Long id, Double paymentAumont) {
		Credit credit = creditRepository.findById(id).orElse(null);
		if(credit != null) {
			if(paymentAumont <= 0) {
				return "Payment amount is invalid, enter a number greater than 0";
			}
			
			if(paymentAumont > credit.getAmount()) {
				return "the payment is greater than the credit amount";
			}
			
			credit.setAmount(credit.getAmount() - paymentAumont);
			creditRepository.save(credit);
			
			Movement movement = new Movement();
			movement.setAccountId(id);
			movement.setTypeMovement("payment");
			movement.setTypeProduct("credit");
			movement.setAmount(paymentAumont);
			
			ResponseEntity<String> response = movementFeign.createMovement(movement);
			
			if(response.getStatusCode() == HttpStatus.CREATED) {
				return "Payment: "+paymentAumont;
			}
		}
		return "Credit Not Found";
	}

	@Override
	public Credit getCreditById(Long id) {
		return creditRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("Credit not found"));
	}

	@Override
	public List<Credit> getAllCredits() {
		return creditRepository.findAll();
	}

}
